service httpd-handler {
#	进程是否禁止运行
	master_disable = no
#	服务地址及端口号
	master_service = 127.0.0.1|8882, httpd-handler.sock

#	服务类型
	master_type = sock

#	当子进程异常退出时，如果该值非空，则将子进程异常退出的消息通知该服务
#	master_notify_addr = 127.0.0.1:5801
#	邮件通知接收者
#	master_notify_recipients = zhengshuxin@hotmail.com

#	是否允许延迟接受客户端连接，如果为0则表示关闭该功能，如果大于0则表示打开此功能
#	并且此值代表延迟接受连接的超时值，超过此值时如果客户端依然没有发来数据，则操作
#	系统会在系统层直接关闭该连接
#	master_defer_accept = 0
#	是否只允许私有访问, 如果为 y, 则域套接口创建在 {install_path}/var/log/private/ 目录下,
#	如果为 n, 则域套接口创建在 {install_path}/var/log/public/ 目录下,
	master_private = n
	master_unpriv = n
#	是否需要 chroot: n -- no, y -- yes
	master_chroot = n
#	每隔多长时间触发一次，单位为秒(仅对 trigger 模式有效)
	master_wakeup = -
#	最大进程数
	master_maxproc = 2
#	预启动进程数，该值不得大于 master_maxproc
	master_prefork = 2
#	进程程序名
	master_command = {install_path}/sbin/httpd-handler
#	进程日志记录文件
	master_log = {install_path}/var/log/httpd-handler.log
#	进程运行时的用户身份
#	master_owner = root
#	调试日志方式，格式：tag:level; tag:level; tab:level, 如：all:1; 101:2
#	master_debug =
#	进程启动参数
#	master_args =
#	传递给服务子进程的环境变量, 可以通过 getenv("SERVICE_ENV") 获得此值
#	master_env = mempool_limit:512000000
#	当启动多个子进程实例时，该开关控制多个子进程在接收连接时是否向 acl_master 发送消息报告自己的状态
#	master_status_notify = 1
#	每个进程实例处理连接数的最大次数，超过此值后进程实例主动退出
	app_use_limit = 0
#	每个进程实例的空闲超时时间，超过此值后进程实例主动退出
	app_idle_limit = 0
#	进程运行时所在的路径
	app_queue_dir = {install_path}/var
#	该值 > 0 时则使用此值做为启动线程数
	app_threads = 0

#	当启用 master_dispatch 连接分开服务后，该配置指定 master_dispatch 所监听的
#	域套接口的全路径，这样本子进程就可以从 master_dispatch 获得客户端连接
#	app_dispatch_addr = {install_path}/var/private/dispatch.sock
#	当 app_dispatch_addr 开启后，下面参数控制本服务进程发给前端 master_dispatch 的服务标识信息
#	app_dispatch_type = default

#	允许访问 udserver 的客户端IP地址范围
#	app_access_allow = 127.0.0.1:255.255.255.255, 127.0.0.1:127.0.0.1
	app_access_allow = all

#	当 acl_master 退出时，如果该值置1则该程序不等所有连接处理完毕便立即退出
	app_quick_abort = 0

#	当 app_quick_abort 为 0 且本配置项大于 0 时，该配置项才有效，指定了
#	本进程在所有连接退出前的最大等待时间(秒)
	app_wait_limit = 0

############################################################################
#	应用自己的配置选项

	test_src = hello
	test_bool = 1
}
